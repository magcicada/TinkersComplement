buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = "knightminer.tcomplement"
archivesBaseName = "TinkersComplement"

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}

version = "${config.minecraft_version}-${config.mod_version}"
//adds the build number to the end of the version string if on a build server
if (System.getenv().BUILD_NUMBER != null) {
	version += ".${System.getenv().BUILD_NUMBER}"
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
	mappings = config.mappings
    runDir = "run"
	replace '${version}', project.version									 
	useDepAts = true				
}

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

repositories {
    maven {
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
	maven {
		name 'tterrag'
		url 'https://maven.tterrag.com/'
	}
	maven {
		name 'Jared'
		url 'https://maven.blamejared.com/'
	}
    maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        name = 'CTM artifacts'
        url = 'https://mvnrepository.com/artifact/team.chisel.ctm/CTM/'
    }
}

dependencies {
    deobfCompile "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}"
    deobfCompile "slimeknights.mantle:Mantle:${config.minecraft_base_version}-${config.mantle_version}"
    deobfCompile "slimeknights:TConstruct:${config.minecraft_version}-${config.tinkers_version}"
    deobfCompile "team.chisel.ctm:CTM:MC1.12.2-1.0.2.31"
    //deobfCompile "team.chisel.ctm:CTM:MC${config.minecraft_version}-${config.ctm_version}"
    //deobfCompile "team.chisel:Chisel:MC${config.minecraft_version}-${config.chisel_version}"
    // deobfCompile "team.chisel:Chisel:MC${config.minecraft_version}-${config.chisel_version}:api"
    deobfCompile("exnihilocreatio:exnihilocreatio:${config.minecraft_base_version}-${config.exnihilo_version}") {
		transitive = false
	}
    deobfCompile "tinkers-tool-leveling:TinkerToolLeveling:${config.minecraft_base_version}:${config.tool_leveling}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Add Access Transformers Manifest
jar {
    finalizedBy reobfJar
}

// because the normal output has been made to be obfuscated
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}
